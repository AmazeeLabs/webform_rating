<?php

/**
 * @file
 *  Implements a rating system for nodes using webforms.
 */

define('WEBFORM_RATING_ACCESS_DENY', 'deny');

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function webform_rating_form_node_type_form_alter(&$form, $form_state, $form_id) {
  $checkbox_field = array(
    '#type' => 'checkbox',
    '#title' => t('Enable webform rating functionality'),
    '#description' => t('Allows this webform to behave like a rating webform, meaning that the submissions will be attached to a node.'),
    '#weight' => 10,
    '#default_value' => variable_get('webform_rating_node_' . $form['#node_type']->type, FALSE),
    '#states' => array(
      'enabled' => array(
        ':input[name="webform_node"]' => array('checked' => TRUE),
      ),
      'visible' => array(
        ':input[name="webform_node"]' => array('checked' => TRUE),
      )
    ),
    '#attributes' => array(
      'data-enabled-description' => t('Rating enabled'),
      'data-disabled-description' => t('Rating disabled'),
    ),
  );

  // Create the setting field for what node types can be rated.
  $node_types = node_type_get_types();
  $node_type_options = array();
  foreach ($node_types as $node_type) {
    $node_type_options[$node_type->type] = $node_type->name;
  }
  $node_types_field = array(
    '#type' => 'checkboxes',
    '#title' => t('Which node types can be rated?'),
    '#options' => $node_type_options,
    '#default_value' => variable_get('webform_rating_node_types_' . $form['#node_type']->type, array()),
    '#weight' => 11,
    '#states' => array(
      'enabled' => array(
        ':input[name="webform_rating_node"]' => array('checked' => TRUE),
      ),
      'visible' => array(
        ':input[name="webform_rating_node"]' => array('checked' => TRUE),
      )
    ),
  );
  // In case the webform fieldset is not there, we show the field separately.
  if (!empty($form['webform'])) {
    $form['webform']['webform_rating_node'] = $checkbox_field;
    $form['webform']['webform_rating_node_types'] = $node_types_field;
  }
  else {
    $form['webform_rating_node'] = $checkbox_field;
    $form['webform_rating_node_types'] = $node_types_field;
  }
}

/**
 * Implements hook_menu().
 */
function webform_rating_menu() {
  $items['node/%webform_menu/webform/update_scores'] = array(
    'title' => 'Re-calculate scores',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webform_rating_recalculate_form', 1),
    'access callback' => 'webform_rating_recalculate_access',
    'access arguments' => array(1),
    'file' => 'webform_rating.admin.inc',
    'weight' => 10,
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Menu access callback for the recalculation of the webform score.
 */
function webform_rating_recalculate_access($webform) {
  return (webform_rating_is_enabled($webform->type) && webform_node_update_access($webform));
}

/**
 * Implements hook_permission().
 */
function webform_rating_permission() {
  $node_types = node_type_get_types();
  $permissions = array();
  foreach ($node_types as $node_type) {
    $permissions['rate ' . $node_type->type . ' content'] = array(
      'title' => t('Rate !content_type content', array('!content_type' => $node_type->name)),
    );
  }
  return $permissions;
}

/**
 * Checks if an user has access to rate a node.
 *
 * @param object $target_node
 *  The target node to rate.
 *
 * @param object $webform_node
 *  The webform node used for rating.
 *
 * @param object $account
 *  Optional, the user account to be checked for access. By default it is the
 *  current logged in user.
 *
 * @param boolean $reset
 *  Flag if we should reset the internal static cache.
 */
function webform_rating_user_has_rating_access($target_node, $webform_node, $account = NULL, $reset = FALSE) {
  if (empty($account)) {
    global $user;
    $account = clone $user;
  }
  $access = &drupal_static(__FUNCTION__, array());
  if (!isset($access[$target_node->nid][$account->uid]) || !empty($reset)) {
    // By default, we set it to false.
    $access[$target_node->nid][$account->uid] = FALSE;

    // First, the user must have view access for the target node.
    if (node_access('view', $target_node, $account)) {
      $access[$target_node->nid][$account->uid] = user_access('rate ' . $target_node->type . ' content');
      // If the user has the basic access to rate the node, we give a chance to
      // other modules to alter the access.
      if ($access[$target_node->nid][$account->uid]) {
        $modules_access = module_invoke_all('webform_rating_rating_access', $target_node, $webform_node, $account);
        if (!empty($modules_access)) {
          foreach ($modules_access as $value) {
            // If one module specifically denies the access, we deny it.
            if ($value === WEBFORM_RATING_ACCESS_DENY) {
              $access[$target_node->nid][$account->uid] = FALSE;
              break;
            }
          }
        }
      }
    }
  }
  return $access[$target_node->nid][$account->uid];
}

/**
 * Loads a webform rating row by its sid.
 *
 * @param int $sid
 *  The webform submission id.
 */
function webform_rating_load_by_sid($sid) {
  return db_select('webform_rating_nodes', 'wrn')->fields('wrn')->condition('wrn.sid', $sid)->execute()->fetch();
}

/**
 * Returns an array of ratings by a set of conditions.
 */
function webform_rating_load_by_conditions($conditions = array()) {
  $query = db_select('webform_rating_nodes', 'wrn')->fields('wrn');
  if (!empty($conditions)) {
    foreach ($conditions as $key => $value) {
      $query->condition('wrn.' . $key, $value);
    }
  }
  return $query->execute()->fetchAll();
}

/**
 * Saves a rating object into the database.
 *
 * @param object $rating
 *  An object that maps over the {webform_rating_nodes} table.
 */
function webform_rating_save_rating($rating) {
  $primary_keys = !empty($rating->is_new) ? array() : array('sid');
  $update = drupal_write_record('webform_rating_nodes', $rating, $primary_keys);
  return ($update !== FALSE) ? $rating : FALSE;
}

/**
 * Implements hook_webform_submission_delete().
 */
function webform_rating_webform_submission_delete($node, $submission) {
  // When a submission is deleted, delete also the rating.
  db_delete('webform_rating_nodes')->condition('sid', $submission->sid)->execute();
}

/**
 * Implements hook_module_implements_alter().
 */
function webform_rating_module_implements_alter(&$implementations, $hook) {
  // Our module should be called last with this hook.
  if ($hook == 'forms') {
    // We want to completely overwrite the hook_forms() from the webform module.
    // At the moment it declares only one form callback there, but if this will
    // change, we have to change our hook_forms() too.
    if (isset($implementations['webform'])) {
      unset($implementations['webform']);
    }
  }
}

/**
 * Implements hook_forms().
 */
function webform_rating_forms($form_id) {
  $forms = array();
  // We overwrite the client form so that we can easily prefill a few values
  // before calling the main form constructor.
  if (strpos($form_id, 'webform_client_form_') === 0) {
    $forms[$form_id]['callback'] = 'webform_rating_client_form';
  }
  return $forms;
}

/**
 * Form constructor for a client webform. It overwrites the webform_client_form()
 * in webform_rating_forms(), but it defaults in the end to the same base form
 * id, so all the alter functions will work.
 */
function webform_rating_client_form($form, &$form_state, $node, $submission = FALSE, $is_draft = FALSE, $filter = TRUE) {
  return WebformRatingClientForm::webformClientForm($form, $form_state, $node, $submission, $is_draft, $filter);
}

/**
 * Additional submit handler for the webform client form.
 */
function webform_rating_webform_client_form_submit(&$form, &$form_state) {
  WebformRatingClientForm::webformClientFormSubmit($form, $form_state);
}

/**
 * Helper function to check if the rating functionality is enabled for a node
 * type.
 *
 * @param string $node_type
 *  The node type.
 */
function webform_rating_is_enabled($node_type) {
  return variable_get('webform_rating_node_' . $node_type, FALSE);
}

/**
 * Helper function to check if a certain webform type can be used to rate a
 * certain node (target) node type.
 *
 * @param string $webform_node_type
 *  The node type of the webform.
 *
 * @param string $target_node_type
 *  The node type of the target.
 */
function webform_rating_can_rate_node_type($webform_node_type, $target_node_type) {
  if (webform_rating_is_enabled($webform_node_type)  && in_array($target_node_type, variable_get('webform_rating_node_types_' . $webform_node_type, array()))) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function webform_rating_form_webform_component_edit_form_alter(&$form, &$form_state, $form_id) {
  // We alter only the select elements, and only if we enabled the rating
  // functionality for this content type.
  if (webform_rating_is_enabled($form['#node']->type) && $form['type']['#value'] == 'select') {
    WebformRatingEditComponent::webformComponentEditFormAlter($form, $form_state);
  }
}

/**
 * Additional validation handler for the component edit form.
 */
function webform_rating_form_webform_component_edit_form_validate(&$form, &$form_state) {
  WebformRatingEditComponent::webformCcomponentEditFormValidate($form, $form_state);
}

/**
 * Ajax callback for the update operation of the items form element in the edit
 * component form.
 *
 * @see WebformRatingEditComponent::webformComponentEditFormAlter().
 */
function webform_rating_webform_component_items_rating_update($form, $form_state) {
  // All we have to do is basically to return the udpated items_rating form
  // element.
  return $form['extra']['items_rating'];
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function webform_rating_form_node_form_alter(&$form, &$form_state, $form_id) {
  if (webform_rating_is_enabled($form['type']['#value'])) {
    $form['webform_rating_default_form'] = array(
      '#title' => t('Set as the default rating form'),
      '#type' => 'checkbox',
      '#description' => t('When this is set, then the rate links which do not explicitly specify another rating form, will use this form.'),
      '#default_value' => (!empty($form['nid']['#value']) && variable_get('webform_rating_default_form', FALSE) === $form['nid']['#value']) ? TRUE : FALSE,
      '#weight' => 5,
    );
    $form['actions']['submit']['#submit'][] = 'webform_rating_node_form_submit';
  }
}

/**
 * Additional submit handler for the node form.
 *
 * This will handle the webform_rating_default_form setting.
 */
function webform_rating_node_form_submit(&$form, &$form_state) {
  if (!empty($form_state['values']['webform_rating_default_form'])) {
    variable_set('webform_rating_default_form', $form_state['values']['nid']);
  }
  else {
    // If the checkbox is not set, we delete the variable by only if the
    // previous value was this node. Otherwise we keep the variable as it is.
    $current_value = variable_get('webform_rating_default_form', FALSE);
    if ($current_value == $form_state['values']['nid']) {
      variable_del('webform_rating_default_form');
    }
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function webform_rating_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return 'plugins/' . $plugin;
  }
}

/**
 * Helper function to return the webform nid from an optional context.
 *
 * If there is a value in the context, it will return it, otherwise it will
 * return the default webform nid from the system.
 *
 * @param object $context
 *  A ctools context object.
 *
 * @return int|FALSE
 *  If we have a webform node id in the context or in the system, it will return
 *  it, otherwise it will return FALSE;
 */
function webform_rating_get_webform_nid_from_optional_context($context) {
  if (!empty($context->data)) {
    $webform_nid = $context->data->nid;
  }
  else {
    $webform_nid = variable_get('webform_rating_default_form', FALSE);
  }
  return $webform_nid;
}
